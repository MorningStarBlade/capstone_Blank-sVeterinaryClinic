<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <%- include('css/indexCss'); %>
  <%- include('css/resourceCss'); %>
  <title>Blank's Veterinary Clinic</title>

  <!--Scripts for dynamic map-->
<link href="https://api.mapbox.com/mapbox-gl-js/v3.0.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v3.0.0/mapbox-gl.js"></script>
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css' type='text/css' />

</head>


<body id="body">

  <%- include('header'); %>

  <div id="main">
    <hr>
    <header>
      <h2>Resources</h2>
      <nav>
        <a href="#emergency-info">Emergency Info</a> |
        <a href="#locations">Clinic Locator</a> |
        <a href="#faq">FAQ</a> |
        <a href="#additional-resources">Additional Resources</a>
      </nav>


      <!--Search Bar-->
      <div id="search-container">
        <input type="text" id="searchBar" placeholder="Search..." aria-label="Search">
        <button onclick="searchContent()">Search</button>
      </div>
      
    </header>
    <br>
    <hr>
    <section id="emergency-info">
      <h2>Emergency Information</h2>
      
      <p>If your pet is experiencing an emergency, please follow the steps below and contact us immediately at the provided emergency contact number.</p>
      
      <div class="contacts">
        <h2>Contact Information</h2>
        <p class="emergency-contact">Emergency Hotline: (123) 456-7890</p>
        <p class="emergency-contact">After-Hours Number: (123) 456-7891</p>
        <p>Address for emergency clinic visits: 123 Pet Health Drive, Petville, WI 12345</p>
      </div>
      
      <div class="procedures">
        <h2>Immediate Steps in an Emergency</h2>
        <ul class="procedure-list">
          <li>Remain calm and carefully assess the situation.</li>
          <li>If possible, safely transport your pet to our clinic, or the nearest emergency veterinary clinic.</li>
          <li>Call ahead to the emergency number provided so the clinic can prepare for your arrival.</li>
          <li>Avoid giving any medications or home remedies without consulting a vet first.</li>
          <li>Bring any relevant medical history or information about your pet.</li>
        </ul>
      </div>
    </section>
    <br>
    <hr>
  
    <section id="faq">
      <h3>FAQ</h3>
      <h4 onclick="toggleContent('question1', 'icon1');" class="toggle-icon">
      <span id="icon1">►</span>What are the clinic's hours of operation?</h4>
      <div id="question1" style="display: none;">
          <p>
            Our doors swing open at the crack of 9 AM, just after our coffee machines start percolating the elixir of life. We wrap up at 5 PM, because even our stethoscopes need their beauty sleep. We're here Monday to Friday, but on weekends, we let the clinic's ghost keep an eye on things.
          </p>
      </div>

      <h4 onclick="toggleContent('question2', 'icon2');" class="toggle-icon">
      <span id="icon2">►</span>Do I need an appointment to see a vet, or do you accept walk-ins?</h4>
      <div id="question2" style="display: none;">
          <p>
            Appointments are preferred—it helps us ensure your pet isn't kept waiting while we're playing hide and seek with a particularly cunning hamster. But if you decide to just swan in, we'll fit you in between the tickles and treats sessions. Just be warned, our lobby magazine selection hasn't been updated since the '90s.
          </p>
      </div>

      <h4 onclick="toggleContent('question3', 'icon3');" class="toggle-icon">
      <span id="icon3">►</span>What kind of animals do you treat at your clinic?</h4>
      <div id="question3" style="display: none;">
          <p>
            We treat all creatures great and small, except maybe dinosaurs—still working on that time machine. Dogs, cats, rabbits, birds, lizards, and pocket pets are all welcome. If your pet can fit through the door without us having to call in structural engineers, we're probably equipped to handle it.
          </p>
      </div>
    </section>
    <hr>
    <br>
    <section id="additional-resources">  
        <h3>Helpful links about Pet Health:</h3>
        <ul>
          <li>
            <a href="https://www.aaha.org/your-pet/pet-owner-education/" target="_blank">AAHA Pet Owner Resources</a> - Reliable pet care, health, and wellness information reviewed by veterinary professionals.
          </li>
          <li>
            <a href="https://www.aspca.org/pet-care/animal-poison-control" target="_blank">ASPCA Animal Poison Control Center</a> - Essential resource for pet poisoning emergencies with a 24/7 hotline.
          </li>
          <li>
            <a href="https://veterinarypartner.vin.com/default.aspx?pid=19239&id=4951486" target="_blank">Veterinary Partner - Behavior Articles</a> - Expert advice on pet behavior, training tips, and managing behavioral issues.
          </li>
        </ul>
      </section>
      <br>
      <hr>

  <section id="locations">
      <h3>Find the nearest clinic:</h3>
      <p>
        Access Blank's Vet Clinic locations easily with our interactive map.
      </p>
    <br>

    <!--New map using MAPBOX API-->

  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
  <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css" type="text/css">

  <!--Containers for map and sidebar
  <div class="container">
    <div class="sidebar">
      <div class='heading'>
        <h3>Our clinic locations</h3>
      </div>
      <div id='listings' class='listings'></div>
    </div>
    -->
    <div class="map-container">
      <div id="map" style='width: 800px; height: 500px;'></div>
    </div>
  </div>
  <br>

  <%- include('footer'); %>

  <script>
    // For FAQ dropdown menu
    function toggleContent(id, iconId) {
      var content = document.getElementById(id);
      var icon = document.getElementById(iconId);
      if (content.style.display === "block") {
        content.style.display = "none";
        icon.innerHTML = '►';
      } else {
        content.style.display = "block";
        icon.innerHTML = '▼';
      }
    }

    // For Search Bar
    function searchContent() {
      // Retrieve the search query
      var input = document.getElementById('searchBar');
      var filter = input.value.toUpperCase();
      
      // Retrieve all the sections that might contain the searchable content
      var sections = document.querySelectorAll('section');

      // Loop through all sections and hide those that don't match the search query
      sections.forEach(function(section) {
        // Retrieve all text elements within the section
        var textElements = section.querySelectorAll('h1, h2, h3, h4, p, li');
        
        // This flag will be true if any text element within the section matches the search query
        var sectionContainsQuery = Array.from(textElements).some(function(element) {
          var textValue = element.textContent || element.innerText;
          return textValue.toUpperCase().indexOf(filter) > -1;
        });

        // Show or hide the entire section based on the flag
        section.style.display = sectionContainsQuery ? '' : 'none';
      });
  }
  
  // Map Functionality 
    mapboxgl.accessToken = 'pk.eyJ1IjoibW01MzI0OSIsImEiOiJjbHBxNGRicWQwNGVwMnFrOG04NGVsenc3In0.yijzGPbqporkWbRjs-_pBQ';

    const map = new mapboxgl.Map({
      container: 'map',
      // Placed markers with MapBox Studio
      style: 'mapbox://styles/mm53249/clpq7ao2g00bq01px3l2aejms',
      center: [-89.500000, 44.500000], // Center the map on Wisconsin
      zoom: 6
    });

    map.on('load', () => {
      map.addSource('places', {
      type: 'geojson',
      data: clinics
    });
    
    //addMarkers();
    //buildLocationList(clinic);
  });

  function addMarkers() {
    /* For each feature in the GeoJSON object above: */
    for (const marker of clinics.features) {
      /* Create a div element for the marker. */
      const el = document.createElement('div');
      /* Assign a unique `id` to the marker. */
      el.id = `marker-${marker.properties.id}`;
      /* Assign the `marker` class to each marker for styling. */
      el.className = 'marker';

      /**
       * Create a marker and add it to the map.
       **/
      new mapboxgl.Marker(el, { offset: [0, -23] })
        .setLngLat(marker.geometry.coordinates)
        .addTo(map);

        el.addEventListener('click', (e) => {
        /* Fly to the point */
        flyToStore(marker);
        /* Close all other popups and display popup for clicked store */
        createPopUp(marker);
        /* Highlight listing in sidebar */
        const activeItem = document.getElementsByClassName('active');
        e.stopPropagation();
        if (activeItem[0]) {
          activeItem[0].classList.remove('active');
        }
        const listing = document.getElementById(`listing-${marker.properties.id}`);
        listing.classList.add('active');
  });
    }
  }

  // Clinic Locations
  const clinics = {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [-91.4984941, 44.811349]
        },
        "properties": {
          "name": "Eau Claire, WI"
        }
      },
      {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [-87.9064736, 43.0389025]
        },
        "properties": {
          "name": "Milwaukee, WI"
        }
      },
      {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [-89.4012302, 43.0730517]
        },
        "properties": {
          "name": "Madison, WI"
        }
      },
      {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [-88.019826, 44.519159]
        },
        "properties": {
          "name": "Green Bay, WI"
        }
      },
      {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [-88.41538, 44.261931]
        },
        "properties": {
          "name": "Appleton, WI"
        }
      }
    ]
  };

  /* Assign a unique ID to each store */
  clinics.features.forEach(function (store, i) {
    store.properties.id = i;
  });

  map.on('load', () => {
    /* Add the data to your map as a layer */
    map.addLayer({
      id: 'locations',
      type: 'circle',
      /* Add a GeoJSON source containing place coordinates and information. */
      source: {
        type: 'geojson',
        data: clinics
      }
    });

    buildLocationList(clinics);
    addMarkers();
  });

  function buildLocationList(clinics) {
    for (const store of clinics.features) {
      /* Add a new listing section to the sidebar. */
      const listings = document.getElementById('listings');
      const listing = listings.appendChild(document.createElement('div'));
      /* Assign a unique `id` to the listing. */
      listing.id = `listing-${store.properties.id}`;
      /* Assign the `item` class to each listing for styling. */
      listing.className = 'item';

      /* Add the link to the individual listing created above. */
      const link = listing.appendChild(document.createElement('a'));
      link.href = '#';
      link.className = 'title';
      link.id = `link-${store.properties.id}`;
      link.innerHTML = `${store.properties.address}`;

      /* Add details to the individual listing. */
      const details = listing.appendChild(document.createElement('div'));
      details.innerHTML = `${store.properties.city}`;
      if (store.properties.phone) {
        details.innerHTML += ` · ${store.properties.phoneFormatted}`;
      }
      if (store.properties.distance) {
        const roundedDistance = Math.round(store.properties.distance * 100) / 100;
        details.innerHTML += `<div><strong>${roundedDistance} miles away</strong></div>`;
      }
    }
  }

      const geocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken, // Set the access token
      mapboxgl: mapboxgl, // Set the mapbox-gl instance
      marker: true, // Use the geocoder's default marker style
      bbox: [-92.888114, 42.491983, -86.805415, 47.080621] // Set coordinates range to Southwest and northeast corners of Wisconsin

    });

    // Geo coder controls 
    map.addControl(geocoder, 'top-left');

    // Zoom and rotation controls
    map.addControl(new mapboxgl.NavigationControl());

    // Directions controls 
    map.addControl(
    new MapboxDirections({
    accessToken: mapboxgl.accessToken
    }),
    'top-left'
  
  );

  
  // Handle when a user clicks a link in the sidebar
  link.addEventListener('click', function () {
  for (const feature of clinics.features) {
    if (this.id === `link-${feature.properties.id}`) {
      flyToStore(feature);
      createPopUp(feature);
    }
  }
  const activeItem = document.getElementsByClassName('active');
  if (activeItem[0]) {
      activeItem[0].classList.remove('active');
    }
    this.parentNode.classList.add('active');
  });


  map.on('click', (event) => {
    /* Determine if a feature in the "locations" layer exists at that point. */
    const features = map.queryRenderedFeatures(event.point, {
      layers: ['locations']
  });

  /* If it does not exist, return */
  if (!features.length) return;

  const clickedPoint = features[0];

  /* Fly to the point */
  flyToStore(clickedPoint);

  /* Close all other popups and display popup for clicked store */
  createPopUp(clickedPoint);

  /* Highlight listing in sidebar (and remove highlight for all other listings) */
  const activeItem = document.getElementsByClassName('active');
  if (activeItem[0]) {
    activeItem[0].classList.remove('active');
  }
  const listing = document.getElementById(
    `listing-${clickedPoint.properties.id}`
  );
  listing.classList.add('active');
});


  function buildLocationList(clinics) {
  for (const store of clinics.features) {
    /* Add a new listing section to the sidebar. */
    const listings = document.getElementById('listings');
    const listing = listings.appendChild(document.createElement('div'));
    /* Assign a unique `id` to the listing. */
    listing.id = `listing-${store.properties.id}`;
    /* Assign the `item` class to each listing for styling. */
    listing.className = 'item';

    /* Add the link to the individual listing created above. */
    const link = listing.appendChild(document.createElement('a'));
    link.href = '#';
    link.className = 'title';
    link.id = `link-${store.properties.id}`;
    link.innerHTML = `${store.properties.address}`;

    /* Add details to the individual listing. */
    const details = listing.appendChild(document.createElement('div'));
    details.innerHTML = `${store.properties.city}`;
    if (store.properties.phone) {
      details.innerHTML += ` · ${store.properties.phoneFormatted}`;
    }
    if (store.properties.distance) {
      const roundedDistance = Math.round(store.properties.distance * 100) / 100;
      details.innerHTML += `<div><strong>${roundedDistance} miles away</strong></div>`;
    }
  }
  }

  function flyToStore(currentFeature) {
    map.flyTo({
      center: currentFeature.geometry.coordinates,
      zoom: 15
    });
  }

  function createPopUp(currentFeature) {
    const popUps = document.getElementsByClassName('mapboxgl-popup');
    /* Check if there is already a popup on the map and if so, remove it */
    if (popUps[0]) popUps[0].remove();

    const popup = new mapboxgl.Popup({ closeOnClick: false })
      .setLngLat(currentFeature.geometry.coordinates)
      .setHTML(`<h3>Dr. Blank's Vet Clinic</h3><h4>${currentFeature.properties.address}</h4>`)
      .addTo(map);
  }

  link.addEventListener('click', function () {
    for (const feature of clinics.features) {
      if (this.id === `link-${feature.properties.id}`) {
        flyToStore(feature);
        createPopUp(feature);
      }
    }
  const activeItem = document.getElementsByClassName('active');
  if (activeItem[0]) {
    activeItem[0].classList.remove('active');
    }
    this.parentNode.classList.add('active');
  });
  </script>
</div>

</body>
</html>